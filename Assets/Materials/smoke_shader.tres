[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://Assets/Textures/smoke.jpg" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorOp" id=3]
operator = 7

[sub_resource type="VisualShaderNodeColorConstant" id=4]

[sub_resource type="VisualShader" id=5]
code = "shader_type spatial;
uniform sampler2D tex_frg_3;


void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	vec4 tex_frg_3_read = texture( tex_frg_3 , n_out2p0.xy );
	n_out3p0 = tex_frg_3_read.rgb;
	n_out3p1 = tex_frg_3_read.a;

// Color:5
	vec3 n_out5p0;
	float n_out5p1;
	n_out5p0 = vec3(1.000000,1.000000,1.000000);
	n_out5p1 = 1.000000;

// ColorOp:4
	vec3 n_out4p0;
	{
		float base=n_out3p0.x;
		float blend=n_out5p0.x;
		if (base < 0.5) {
			n_out4p0.x = (base * (blend+0.5));
		} else {
			n_out4p0.x = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}
	{
		float base=n_out3p0.y;
		float blend=n_out5p0.y;
		if (base < 0.5) {
			n_out4p0.y = (base * (blend+0.5));
		} else {
			n_out4p0.y = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}
	{
		float base=n_out3p0.z;
		float blend=n_out5p0.z;
		if (base < 0.5) {
			n_out4p0.z = (base * (blend+0.5));
		} else {
			n_out4p0.z = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = dot(n_out4p0,vec3(0.333333,0.333333,0.333333));

}

void light() {
// Output:0

}
"
nodes/fragment/0/position = Vector2( 840, 40 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 300, 100 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 480, 40 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 660, 220 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 300, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 1, 3, 0, 0, 0 )

[resource]
shader = SubResource( 5 )

