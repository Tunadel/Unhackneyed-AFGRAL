[gd_resource type="ShaderMaterial" load_steps=18 format=2]

[ext_resource path="res://Assets/Textures/animated_texture_test.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVec3Constant" id=1]
constant = Vector3( 0.8, 0.2, 2 )

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 0.6 ]
operator = 2

[sub_resource type="VisualShaderNodeColorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
function = 0

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeVectorCompose" id=12]

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 1.2 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShader" id=16]
code = "shader_type spatial;
uniform sampler2D tex_frg_2;


void vertex() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// VectorDecompose:3
	float n_out3p0;
	float n_out3p1;
	float n_out3p2;
	n_out3p0 = n_out2p0.x;
	n_out3p1 = n_out2p0.y;
	n_out3p2 = n_out2p0.z;

// ScalarOp:5
	float n_in5p1 = 1.20000;
	float n_out5p0;
	n_out5p0 = n_out3p0 * n_in5p1;

// ScalarOp:7
	float n_in7p1 = 1.00000;
	float n_out7p0;
	n_out7p0 = n_out3p1 * n_in7p1;

// ScalarOp:6
	float n_in6p1 = 1.00000;
	float n_out6p0;
	n_out6p0 = n_out3p2 * n_in6p1;

// VectorCompose:4
	vec3 n_out4p0;
	n_out4p0 = vec3( n_out5p0 , n_out7p0 , n_out6p0 );

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(UV,0.0);

// Input:4
	float n_out4p0;
	n_out4p0 = TIME;

// Vector:10
	vec3 n_out10p0;
	n_out10p0 = vec3(0.800000,0.200000,2.000000);

// VectorOp:9
	vec3 n_out9p0;
	n_out9p0 = vec3(n_out4p0) * n_out10p0;

// VectorOp:5
	vec3 n_out5p0;
	n_out5p0 = n_out3p0 + n_out9p0;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_frg_2_read = texture( tex_frg_2 , n_out5p0.xy );
	n_out2p0 = tex_frg_2_read.rgb;
	n_out2p1 = tex_frg_2_read.a;

// ScalarOp:6
	float n_in6p1 = 0.60000;
	float n_out6p0;
	n_out6p0 = n_out4p0 * n_in6p1;

// ColorOp:7
	vec3 n_out7p0;
	n_out7p0=min(vec3(n_out2p1),vec3(n_out6p0));

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = dot(n_out7p0,vec3(0.333333,0.333333,0.333333));
	EMISSION = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -284, -177.25 )
nodes/vertex/0/position = Vector2( 580, -140 )
nodes/vertex/2/node = SubResource( 10 )
nodes/vertex/2/position = Vector2( -180, -100 )
nodes/vertex/3/node = SubResource( 11 )
nodes/vertex/3/position = Vector2( -20, -100 )
nodes/vertex/4/node = SubResource( 12 )
nodes/vertex/4/position = Vector2( 380, -140 )
nodes/vertex/5/node = SubResource( 13 )
nodes/vertex/5/position = Vector2( 220, -180 )
nodes/vertex/6/node = SubResource( 14 )
nodes/vertex/6/position = Vector2( 220, 60 )
nodes/vertex/7/node = SubResource( 15 )
nodes/vertex/7/position = Vector2( 220, -60 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 5, 0, 3, 1, 7, 0, 3, 2, 6, 0, 6, 0, 4, 2, 7, 0, 4, 1, 5, 0, 4, 0, 4, 0, 0, 0 )
nodes/fragment/0/position = Vector2( 860, -220 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 440, -260 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 20, -120 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -240, -100 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 240, -140 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 160, 0 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 660, -80 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 380, 120 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -80, 20 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -280, 0 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 5, 0, 5, 0, 2, 0, 2, 1, 7, 0, 7, 0, 0, 1, 2, 0, 0, 5, 4, 0, 6, 0, 6, 0, 7, 1, 10, 0, 9, 1, 4, 0, 9, 0, 9, 0, 8, 0, 9, 0, 5, 1 )

[resource]
shader = SubResource( 16 )

